- if edit
  %h2 Edit event "#{event.name}"
-else
  %h2 Create a new event

-if unvalid
  .alert.alert-danger Some of your data you key are uncorrect.
  
%form.form-horizontal{:method => "POST"}
  .form-group
    %label{:for => "name"} Title
    -if unvalid && errors.has_key?(:name)
      -errors[:name].each do |msg|
        .alert.alert-danger 
          =msg.capitalize
    %input{:type => "text", :class => "form-control", :id => "name", :placeholder => "Conference...", :name => "name", :value => event.name}/
  
  
  .form-group
    
    %label{:for => "short_text"} Summary (max 255 chars)
    -if unvalid && errors.has_key?(:short_text)
      -errors[:short_text].each do |msg|
        .alert.alert-danger 
          =msg.capitalize
    %textarea{:class => "form-control", :id => "short_text", :placeholder => "A quick summary of you event", :name => "short_text"}= event.short_text
  
  .form-group
    
    %label{:for => "long_text"} Description of the event
    -if unvalid && errors.has_key?(:long_text)
      -errors[:long_text].each do |msg|
        .alert.alert-danger 
          =msg.capitalize
    %textarea{:rows => "15", :'data-provide' => "markdown", :class => "form-control", :id => "long_text", :name => "long_text", :placeholder => "You article content.", :title => "long_text"}= event.long_text

     

  .form-group
    %label{:for => "start_date"} Begin of your event 
    -if unvalid && errors.has_key?(:start_date)
      -errors[:start_date].each do |msg|
        .alert.alert-danger 
          =msg.capitalize
    %input{:type => "datetime-local",:class => "form-control", :id => "start_date", :name => "start_date", :value => event.start_date}/
      
  .form-group
    %label{:for => "end_date"} End of your event 
    -if unvalid && errors.has_key?(:end_date)
      -errors[:end_date].each do |msg|
        .alert.alert-danger 
          =msg.capitalize    
    %input{:type => "datetime-local",:class => "form-control", :id => "end_date", :name => "end_date", :value => event.end_date}/
  .form-group
    %label{:for => "spots_number_limit"} Number of place (0 means no limitation)
    -if unvalid && errors.has_key?(:spots_number_limit)
      -errors[:spots_number_limit].each do |msg|
        .alert.alert-danger 
          =msg.capitalize
    %input{:type => "number",:class => "form-control", :id => "spots_number_limit", :name => "spots_number_limit", :value => event.spots_number_limit}
  -if edit
    -felts = event.form_elements
    -if !felts.empty?
      .row.vcenter.text-left.panel-group

        .col-md-1
          %br/
          %p Delete 
        .col-md-10        
          %h3 Edit form element : 

      -felts.each do |felt|
        .row.vcenter
          .col-md-1.text-center
            .checkbox
              .label
                %input{:type => "checkbox",:id => "delete::#{felt.id}",:name => "delete::#{felt.id}",:value=> '1',:title => "Check this boxe to delete this form-element"}
          .col-md-10.panel.panel-default
            %br
            = haml :'/admin/formElement/newedit', :locals => {:felt => felt,:event => event,:elements=> FormElement.TYPES, :edit => true}
          .col-md-1
            %a.btn.btn-xs.btn-danger{:href => "/admin/form_element/delete/#{felt.id}"} 
              Delete
        

  .checkbox
    %label
      %input{ :type => "checkbox",  :id => "add_form_element", :name => "add_form_element",:value=> '1'}/
      Add a form to your event
  .checkbox
    %label
      %input{event.registration ? {:checked => ""}:{},:type => "checkbox", :id => "registration", :name => "registration",:value=> '1'}/
      Enable registration
  %input.pull-right.btn.btn-lg.btn-primary{:type => "submit", :value => "Publish"}


